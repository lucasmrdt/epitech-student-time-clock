{"version":3,"sources":["constants/network.js","utils.js","components/Timer.js","components/Item.js","api.js","components/List.js","components/App.js","serviceWorker.js","index.js"],"names":["TOGGLE_BREAK_URL","concat","process","REACT_APP_IP","REMOVE_BREAK_URL","COMMENT_URL","LOGINS_URL","formateToNChar","str","length","Array","fill","join","Timer","interval","this","setInterval","forceUpdate","bind","clearInterval","begin","props","now","Date","diff","minutes","getMinutes","seconds","getSeconds","react_default","a","createElement","Typography_default","align","React","PureComponent","Item","commentRef","onToggle","_this$props","_this","student","login","onRemoveBreak","memoize","breakDate","_this$props2","onEditComment","_this$props3","value","renderChip","breakValue","index","classes","end","Chip_default","className","chip","label","key","onDelete","Object","assertThisInitialized","icon","index_es","status","components_Timer","lastUpdate","_this$props4","_student$login$split","split","_student$login$split2","slicedToArray","firstname","lastname","ListItem_default","item","alignItems","ListItemAvatar_default","Avatar_default","alt","src","avatar","ListItemText_default","primary","toLowerCase","secondary","toUpperCase","text","ListItemSecondaryAction_default","Button_default","variant","onClick","renderIcon","_this$props5","chipList","breaks","map","_this2","_this$props6","TextField_default","comment","rowsMax","defaultValue","onBlur","margin","inputRef","r","multiline","container","renderProfileInformation","renderChipList","renderComment","withStyles","width","minWidth","maxWidth","marginTop","height","marginRight","overflowX","display","marginBottom","parseData","data","mappedData","b","_b$split","_b$split2","sort","toggleBreak","_ref","asyncToGenerator","regenerator_default","mark","_callee","date","res","wrap","_context","prev","next","fetch","method","body","JSON","stringify","headers","Content-Type","sent","json","abrupt","stop","_x","_x2","apply","arguments","removeBreak","_ref2","_callee2","_context2","_x3","_x4","updateComment","_ref3","_callee3","_context3","_x5","_x6","getStudents","_ref4","_callee4","_context4","crossDomain","List","state","students","onToggleStudent","hours","formatedDate","getHours","setState","t0","console","error","alert","onRemoveStudentBreak","renderItem","components_Item","center","CircularProgress_default","_this$state","renderLoading","renderError","List_default","flexDirection","position","left","top","transform","paddingBottom","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","App","document","getElementById","URL","href","origin","addEventListener","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f17febde.chunk.js","sourcesContent":["// @flow\n\nexport const GET_PICTURE_URL_FROM_LOGIN = (login: string) => (\n    `https://intra.epitech.eu/file/userprofil/profilview/${login}.jpg`\n);\n\nexport const SERVER_PORT = 1234;\nexport const TOGGLE_BREAK_URL = `http://${process.env.REACT_APP_IP}:${SERVER_PORT}/break/toggle`;\nexport const REMOVE_BREAK_URL = `http://${process.env.REACT_APP_IP}:${SERVER_PORT}/break/remove`;\nexport const COMMENT_URL = `http://${process.env.REACT_APP_IP}:${SERVER_PORT}/comment`;\nexport const LOGINS_URL = `http://${process.env.REACT_APP_IP}:${SERVER_PORT}/logins`\n","// @flow\n\nexport const formateToNChar = (str: string, length: number) => (\n    `${Array(length - str.length).fill('0').join('')}${str}`\n);","// @flow\n\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { formateToNChar } from 'utils';\n\ntype Props = {\n    begin: number,\n};\n\nclass Timer extends React.PureComponent<Props> {\n    interval = null;\n\n    componentDidMount() {\n        this.interval = setInterval(this.forceUpdate.bind(this), 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        const { begin } = this.props;\n        const now = Date.now();\n        const diff = new Date(now - begin);\n        const minutes = `${diff.getMinutes()}`;\n        const seconds = `${diff.getSeconds()}`;\n\n        return (\n            <Typography align='center'>\n                {`${formateToNChar(minutes, 2)} : ${formateToNChar(seconds, 2)}`}\n            </Typography>\n        );\n    }\n}\n\nexport default Timer;\n","// @flow\n\nimport React from 'react';\nimport memoize from 'memoize-one';\nimport ListItem from '@material-ui/core/ListItem';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Button from '@material-ui/core/Button';\nimport Chip from '@material-ui/core/Chip';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles } from '@material-ui/core/styles';\nimport {\n  PlayArrow as PlayIcon,\n  WatchLater as WatchIcon,\n} from '@material-ui/icons';\nimport { GET_PICTURE_URL_FROM_LOGIN } from 'constants/network';\nimport Timer from './Timer';\n\nimport {\n  type StudentType,\n  type BreakType,\n} from 'types/DataTypes';\n\nconst styles = () => ({\n  container: {\n    width: '100%',\n    minWidth: 300,\n    maxWidth: 600,\n  },\n  item: {\n    marginTop: 30,\n  },\n  text: {\n    maxWidth: '50%',\n  },\n  avatar: {\n    height: 100,\n    width: 100,\n    marginRight: 20,\n  },\n  comment: {\n    width: '100%',\n  },\n  chipList: {\n    overflowX: 'scroll',\n    display: 'flex',\n  },\n  chip: {\n    marginRight: 10,\n    marginBottom: 5,\n  },\n});\n\ntype Props = {\n  student: StudentType,\n  onToggle: (login: string) => void,\n  onRemoveBreak: (login: string, date: string) => void,\n  onEditComment: (login: string, comment: string) => void,\n  classes: Object, // provided by HOC\n};\n\nclass Item extends React.PureComponent<Props> {\n  commentRef: React.Ref = null;\n\n  onToggle = () => {\n    const { onToggle, student } = this.props;\n\n    onToggle(student.login);\n  };\n\n  onRemoveBreak = memoize((breakDate: string) => {\n    const { student, onRemoveBreak } = this.props;\n    onRemoveBreak(student.login, breakDate);\n  });\n\n  onEditComment = () => {\n    if (!this.commentRef) return;\n\n    const { onEditComment, student } = this.props;\n    const { value } = this.commentRef;\n    onEditComment(student.login, value);\n  };\n\n  renderChip = (breakValue: BreakType, index: number) => {\n    const { classes } = this.props;\n    const { begin, end } = breakValue;\n\n    return (\n      <Chip\n        className={classes.chip}\n        label={`${begin} - ${end}`}\n        key={`${begin}_${end}_${index}`}\n        onDelete={this.onRemoveBreak.bind(this, `${begin} -> ${end}`)}\n        icon={<WatchIcon />}\n      />\n    );\n  };\n\n  renderIcon() {\n    const { student } = this.props;\n\n    if (student.status === 'in progress') {\n      return <Timer begin={student.lastUpdate} />;\n    }\n    return <PlayIcon />;\n  }\n\n  renderProfileInformation() {\n    const { classes, student } = this.props;\n    const [firstname, lastname] = student.login.split('.');\n\n    return (\n      <ListItem\n        className={classes.item}\n        alignItems='center'\n      >\n        <ListItemAvatar>\n          <Avatar\n            alt={student.login}\n            src={GET_PICTURE_URL_FROM_LOGIN(student.login)}\n            className={classes.avatar}\n          />\n        </ListItemAvatar>\n        <ListItemText\n          primary={`${firstname.toLowerCase()}`}\n          secondary={`${lastname.toUpperCase()}`}\n          className={classes.text}\n        />\n        <ListItemSecondaryAction>\n          <Button\n            variant='contained'\n            onClick={this.onToggle}\n          >\n            {this.renderIcon()}\n          </Button>\n        </ListItemSecondaryAction>\n      </ListItem>\n    );\n  }\n\n  renderChipList() {\n    const { classes, student } = this.props;\n\n    return (\n      <div className={classes.chipList}>\n        {student.breaks.map(this.renderChip)}\n      </div>\n    );\n  }\n\n  renderComment() {\n    const { student, classes } = this.props;\n\n    return (\n      <TextField\n        className={classes.comment}\n        label='comment'\n        rowsMax='4'\n        defaultValue={student.comment}\n        onBlur={this.onEditComment}\n        margin='normal'\n        variant='outlined'\n        inputRef={r => this.commentRef = r}\n        multiline\n      />\n    );\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.container}>\n        {this.renderProfileInformation()}\n        {this.renderChipList()}\n        {this.renderComment()}\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Item);\n","// @flow\n\nimport {\n    LOGINS_URL,\n    COMMENT_URL,\n    REMOVE_BREAK_URL,\n    TOGGLE_BREAK_URL,\n} from 'constants/network';\n\nimport {\n    type StudentType,\n    type BreakType,\n} from 'types/DataTypes';\n\nconst sortByLogin = (students: Array<StudentType>) => (\n    students.sort((a, b) => {\n        if (a.login < b.login) return -1;\n        if (a.login > b.login) return 1;\n        return 0;\n    })\n);\n\nconst parseData = (data: Array<StudentType>) => {\n    const mappedData = data.map(student => {\n        const breaks: Array<BreakType> = student.breaks.map(b => {\n            const [begin, end] = b.split(/ *->? */);\n            return { begin, end };\n        });\n        return {\n            login: student.login,\n            lastUpdate: student.lastUpdate,\n            status: student.status,\n            comment: student.comment,\n            breaks,\n        }\n    });\n    const sortedData = sortByLogin(mappedData);\n    return sortedData;\n};\n\nexport const toggleBreak = async (login: string, date: string) => {\n    const res = await fetch(TOGGLE_BREAK_URL, {\n        method: 'POST',\n        body: JSON.stringify({ login, date }),\n        headers: { 'Content-Type': 'application/json' },\n    });\n    const data: Array<StudentType> = await res.json();\n    return parseData(data);\n};\n\nexport const removeBreak = async (login: string, date: string) => {\nconst res = await fetch(REMOVE_BREAK_URL, {\n        method: 'POST',\n        body: JSON.stringify({ login, date }),\n        headers: { 'Content-Type': 'application/json' },\n    });\n    const data: Array<StudentType> = await res.json();\n    return parseData(data);\n};\n\nexport const updateComment = async (login: string, comment: string) => {\n    const res = await fetch(COMMENT_URL, {\n        method: 'POST',\n        body: JSON.stringify({ login, comment }),\n        headers: { 'Content-Type': 'application/json' },\n    });\n    const data: Array<StudentType> = await res.json();\n    return parseData(data);\n};\n\nexport const getStudents = async () => {\n    const res = await fetch(LOGINS_URL, { crossDomain: true });\n    const data = await res.json();\n    return parseData(data);\n};\n","// @flow\n\nimport React from 'react';\nimport { withStyles } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport MaterialList from '@material-ui/core/List';\nimport Item from './Item';\nimport {\n  getStudents,\n  toggleBreak,\n  updateComment,\n  removeBreak,\n} from 'api';\nimport { formateToNChar } from 'utils';\n\nimport { type StudentType } from 'types/DataTypes';\n\nconst styles = () => ({\n  container: {\n    height: '100%',\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  center: {\n    position: 'absolute',\n    left: '50%',\n    top: '50%',\n    transform: 'translate(-50%, -50%)',\n  },\n  avatar: {\n    height: 100,\n    width: 100,\n    marginRight: 20,\n  },\n  chipList: {\n    overflowX: 'scroll',\n    display: 'flex',\n    paddingBottom: 20,\n  },\n  chip: {\n    marginRight: 10,\n    marginBottom: 5,\n  },\n});\n\ntype Props = {\n  classes: Object,\n};\n\ntype State = {\n  students: Array<StudentType>,\n  status: 'loading' | 'failed' | 'success',\n};\n\nclass List extends React.PureComponent<Props, State> {\n  state: State = {\n    status: 'loading',\n    students: {},\n  };\n\n  async componentDidMount() {\n    try {\n      const students = await getStudents();\n      this.setState({ students, status: 'success' });\n    } catch (e) {\n      console.error('fail to get logins.');\n      this.setState({ status: 'failed' });\n    }\n  }\n\n  onToggleStudent = async (login: string) => {\n    const date = new Date();\n    const hours = `${date.getHours()}`;\n    const minutes = `${date.getMinutes()}`;\n    const formatedDate = `${formateToNChar(hours, 2)}:${formateToNChar(minutes, 2)}`;\n    try {\n      const students = await toggleBreak(login, formatedDate);\n      this.setState({ students });\n    } catch (e) {\n      console.error(e);\n      alert('fail to toggle student break.');\n    }\n  }\n\n  onRemoveStudentBreak = async (login: string, date: string) => {\n    try {\n      const students = await removeBreak(login, date);\n      this.setState({ students });\n    } catch (e) {\n      console.error(e);\n      alert('fail to remove break.');\n    }\n  };\n\n  onEditComment = async (login: string, comment: string) => {\n    try {\n      const students = await updateComment(login, comment);\n      this.setState({ students });\n    } catch (e) {\n      console.error(e);\n      alert('fail to update comment.');\n    }\n  };\n\n  renderItem = (student: StudentType, index: number) => (\n    <Item\n      key={`${student.login}_${index}`}\n      onToggle={this.onToggleStudent}\n      onRemoveBreak={this.onRemoveStudentBreak}\n      onEditComment={this.onEditComment}\n      student={student}\n    />\n  )\n\n  renderError() {\n    const { classes } = this.props;\n\n    return (\n      <img\n        className={classes.center}\n        alt='error'\n        src='https://cdn.dribbble.com/users/463734/screenshots/2016799/generic-error_shot.png'\n      />\n    );\n  }\n\n  renderLoading() {\n    const { classes } = this.props;\n\n    return (\n      <CircularProgress className={classes.center} />\n    );\n  }\n\n  render() {\n    const { status, students } = this.state;\n    const { classes } = this.props;\n\n    if (status === 'loading') {\n      return this.renderLoading();\n    }\n    if (status === 'failed') {\n      return this.renderError();\n    }\n\n    return (\n      <MaterialList className={classes.container}>\n        {students.map(this.renderItem)}\n      </MaterialList>\n    );\n  }\n}\n\nexport default withStyles(styles)(List);\n","// @flow\n\nimport List from './List';\n\nexport default List;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}